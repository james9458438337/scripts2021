#List all mysql users
SELECT User,Host FROM mysql.user;

#List grants for a mysql user
SHOW GRANTS FOR 'bloguser'@'localhost';


#Revoke all grants for a mysql user
REVOKE ALL PRIVILEGES, GRANT OPTION FROM 'bloguser'@'localhost';

# Remove/Delete the user from the user table
DROP USER 'bloguser'@'localhost';

#Delete the database
DROP DATABASE mywpblog;
#OR()
DROP USER IF EXISTS bar;


#Create a New User
CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';
FLUSH PRIVILEGES;

#Set password for user
SET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpassword');
FLUSH PRIVILEGES;
#OR
ALTER USER 'root'@'localhost' IDENTIFIED BY 'newpassword';



#check databases size
SELECT table_schema AS "Database", 
ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS "Size (MB)" 
FROM information_schema.TABLES 
GROUP BY table_schema;

#check tables size of indicated database
SELECT table_name AS "Table",
ROUND(((data_length + index_length) / 1024 / 1024), 2) AS "Size (MB)"
FROM information_schema.TABLES
WHERE table_schema = "agmj"
ORDER BY (data_length + index_length) DESC;



######## Note: By default, mysqldump command does not dump the information_schema database, performance_schema, and MySQL Cluster ndbinfo database
If you want to include the information_schema tables, you must explicitly specify the name of the database in the mysqldump command, also include the —skip-lock-tables option.
###############################################################

#Backup all databases
mysqldump -u root -p –all-databases | gzip > <path/db.sql.gz> 

#Backup specific database
mysqldump -u root -p db1 > <path/db.sql | gzip > <path/db.sql.gz>
mysqldump -u root -p --databases db1 db2 | gzip > <path/db.sql.gz>

#Backup database structure
mysqldump -u root -p --no-data | gzip > <path/db.sql.gz>

#Backup without the database structure only data
mysqldump -u root -p –-no-create-info | gzip > <path/db.sql.gz>

#Backup specific table
mysqldump -u root -p db1 table1 table2 | gzip > <path/db.sql.gz>


#Restore databases
drop database  db1
create database db1
mysql -u root -p db1 < <path/db.sql>

#Restore table
use db1
drop table table1

create database db1_dummy
use db1_dummy
source <path/db.sql>

mysqldump -u root -p db1_dummy table1 > <path/db_tb.sql>
use db1
source <path/db_tb.sql>

#########################################################################
yum install perl-Digest-MD5 rsync -y

#xtrabackup full backup from Master #for single db backup --databases='dbName'
xtrabackup --defaults-file=/home/mysql_6605/my.cnf  --backup  --target-dir=/home/qqc/mysql/full_$(date +%Y%m%d%H%M)  --rsync  --user=root --password='tdNXkiJsBgbpw6D+/8AmNDJ1kr0=' --socket=/home/mysql_6605/mysql.sock  2>> /home/qqc/mysql/full_$(date +%Y%m%d%H%M).log



#xtrabackup full backup from slave #for single db backup --databases='dbName'
xtrabackup --defaults-file=/etc/my.cnf --backup --target-dir=/home/qqc/mysql/full_$(date +%Y%m%d%H%M) --slave-info --rsync --user=root --password='tdNXkiJsBgbpw6D+/8AmNDJ1kr0=' --socket=/var/lib/mysql/mysql.sock 2>> /home/qqc/mysql/full_$(date +%Y%m%d%H%M).log


#xtrabackup full restore
xtrabackup --defaults-file=/home/mysql_6605/my.cnf --prepare --target-dir=/home/qqc/mysql/full_202101181405 --rsync  --user=root --password='tdNXkiJsBgbpw6D+/8AmNDJ1kr0=' -S/home/mysql_6605/mysql.sock  2>> /home/qqc/mysql/full_202101181405_prepare.log

#########################################################################

1.查看数据库编码格式
show  create  database  <数据库名>;

2.查看数据表的编码格式
show  create  table  <表名>;

3.创建数据库时指定数据库的字符集
create  database  <数据库名>  character  set  utf8;

4.创建数据表时指定数据表的编码格式
create table tb_books(
    name  varchar(45) not  null,
    price  double  not  null,
    bookCount  int  not  null,
    author  varchar(45)  not  null) default  charset = utf8;

5.修改数据库的编码格式
alter  database  <数据库> character  set  utf8;

6.修改数据表格编码格式
alter  table  <表名> character  set  utf8;

7.修改字段编码格式
alter  table <表名>  change  <字段名>  <字段名>  <类型>  charset  set  utf8;
alter table tb_books change name name varchar(20) character  set  utf8 not null;

show variables like 'char%';

################################# bin logs ########################################
#show binlog format ROW | STATEMENTT | MIXED
mysql> show variables lile 'binlog_format';
#set binlog format
set globe binlog_format='MIXED'
#then add this to /etc/my.cnf
[mysqld]
binlog_format=MIXED

#show binlog status
mysql> show variables like 'log_bin'
#set binlog enable if disabled
mysql> set sql_log_bin=1
#show binlog list
mysql> show binary logs
#show current writing binlog 
mysql> show master status
#show binlog on master
mysql> show master logs
#show events from first binlog
mysql> show binlog events
#show enents from specific binlog
mysql> show binlog enents in '<binlog name>'

#set binlog expire days
mysql> SET GLOBAL expire_logs_days = 7;
mysql> show variables like ‘expire_%’;
#then add this to /etc/my.cnf
[mysqld]
expire-logs-days=3
#and mysqld will delete them logs for you

#purge bin logs
PURGE BINARY LOGS TO ‘mysql-bin.000223’;
#this will erase all binary logs before ‘mysql-bin.000223’.

#if you need to delete all binary logs older than 7 days, you just need to run this sql:
mysql> PURGE BINARY LOGS BEFORE DATE_SUB( NOW( ), INTERVAL 7 DAY);
#To purge all logs before a specific date:
mysql> PURGE MASTER LOGS BEFORE ‘2010-03-01 00:00:00’;
#To purge logs automatically (every Monday at 3am) you could use a cron job like this:

#delete binlog from master
reset master
#delte binlog from slave
reset slave

#flush binlog
mysql> flush logs

#########################################################################